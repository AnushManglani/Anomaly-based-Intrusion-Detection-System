# -*- coding: utf-8 -*-
"""NSL-KDD RNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CU8KQmTrHHFQQg-qA9peUsodYLOWAn3s
"""

from google.colab import drive
drive.mount("/content/drive")

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd



dataset_train = pd.read_csv('drive/My Drive/Anomaly Detection in MANETs/Colab/Datasets/NSLKDD/KDDTrain+.csv')
dataset_test = pd.read_csv('drive/My Drive/Anomaly Detection in MANETs/Colab/Datasets/NSLKDD/KDDTest+.csv')

X_train = dataset_train.iloc[:, :-2].values
Y_train = dataset_train.iloc[:, 41].values

X_test = dataset_test.iloc[:, :-2].values
Y_test = dataset_test.iloc[:, 41].values

print(X_train.shape, X_test.shape, Y_train.shape, Y_test.shape)

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
X_train[:, 1] = LabelEncoder().fit_transform(X_train[:, 1])
X_train[:, 2] = LabelEncoder().fit_transform(X_train[:, 2])
X_train[:, 3] = LabelEncoder().fit_transform(X_train[:, 3])
X_train = OneHotEncoder(categorical_features=[1,2,3]).fit_transform(X_train).toarray()

X_test[:, 1] = LabelEncoder().fit_transform(X_test[:, 1])
X_test[:, 2] = LabelEncoder().fit_transform(X_test[:, 2])
X_test[:, 3] = LabelEncoder().fit_transform(X_test[:, 3])
X_test = OneHotEncoder(categorical_features=[1,2,3]).fit_transform(X_test).toarray()

print(X_train.shape, X_test.shape, Y_train.shape, Y_test.shape)

X_test[:, 3]

dos = ['mailbomb', 'back', 'land', 'neptune', 'pod', 'smurf', 'teardrop', 'apache2', 'udpstorm', 'processtable', 'worm']
probe = ['ipsweep', 'satan', 'nmap', 'portsweep', 'mscan', 'saint']
r2l = ['guess_passwd', 'ftp_write', 'imap', 'phf', 'multihop', 'warezmaster', 'warezclient', 'spy', 'xlock', 'xsnoop', 'snmpguess', 'snmpgetattack', 'httptunnel', 'sendmail', 'named']
u2r = ['buffer_overflow', 'loadmodule', 'rootkit', 'perl', 'sqlattack', 'xterm', 'ps']

for i in range(0, len(Y_train)):
  if Y_train[i] == 'normal':
    Y_train[i] = 0
  elif Y_train[i] in dos:
    Y_train[i] = 1
  elif Y_train[i] in probe:
    Y_train[i] = 2
  elif Y_train[i] in r2l:
    Y_train[i] = 3
  elif Y_train[i] in u2r:
    Y_train[i] = 4
  

for i in range(0, len(Y_test)):
  if Y_test[i] == 'normal':
    Y_test[i] = 0
  elif Y_test[i] in dos:
    Y_test[i] = 1
  elif Y_test[i] in probe:
    Y_test[i] = 2
  elif Y_test[i] in r2l:
    Y_test[i] = 3
  elif Y_test[i] in u2r:
    Y_test[i] = 4

print(set(list(Y_train)))
print(set(list(Y_test)))

Y_train = LabelEncoder().fit_transform(Y_train)
Y_test = LabelEncoder().fit_transform(Y_test)

Y_train

from keras.preprocessing import sequence
from IPython.display import SVG
from keras.utils import np_utils,plot_model
from keras.utils.vis_utils import model_to_dot
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Embedding
from keras.layers import LSTM, SimpleRNN, GRU
from keras.datasets import imdb
from keras.utils.np_utils import to_categorical
from sklearn.metrics import (precision_score, recall_score,
                             f1_score, accuracy_score,mean_squared_error,mean_absolute_error)
from sklearn import metrics
from sklearn.preprocessing import Normalizer
import h5py
from keras import callbacks
from keras import callbacks
from keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau, CSVLogger
from keras import optimizers

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

X_train.shape

X_train = np.reshape(X_train, (X_train.shape[0], 1, X_train.shape[1]))
X_test = np.reshape(X_test, (X_test.shape[0], 1, X_test.shape[1]))

x_train = np.array(X_train)
x_test = np.array(X_test)
y_train1 = np.array(Y_train)
y_test1 = np.array(Y_test)

y_train= to_categorical(y_train1)
y_test= to_categorical(y_test1)

batch_size = 32

model = Sequential()
model.add(LSTM(80,input_dim=122))  
model.add(Dropout(0.1))
model.add(Dense(200, activation='relu'))
model.add(Dropout(0.1))
model.add(Dense(100, activation='relu'))
model.add(Dense(5))
model.add(Activation('softmax'))
opt = optimizers.adam(lr=0.01)
model.compile(loss='categorical_crossentropy',optimizer=opt,metrics=['accuracy'])

model.fit(x_train, y_train, batch_size=batch_size, epochs=50, validation_data=(x_test, y_test))

loss, accuracy = model.evaluate(x_test, y_test)
print(accuracy)

model.summary()

plot_model(model,to_file='model.png')
SVG(model_to_dot(model).create(prog='dot',format='svg'))

from keras.models import load_model
from keras import optimizers

model = load_model('drive/My Drive/Anomaly Detection in MANETs/backup/Jupyter Files/adagrad_binary.h5')

plot_model(model,to_file='adagrad_binary_2fc.png')
SVG(model_to_dot(model).create(prog='dot',format='svg'))

